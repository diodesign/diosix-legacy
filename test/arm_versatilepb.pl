#!/usr/bin/perl

# ----------------------------------------------------------------------
# test/arm_versatilepb.pl
# Define the QEMU boot parameters for testing the arm_versatilepb arch target
# Author : Chris Williams
# Date   : Tues,18 May 2011.18:14:00
#
# Copyright (c) Chris Williams and individual contributors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Contact: chris@diodesign.co.uk / http://www.diodesign.co.uk/
# ______________________________________________________________________


# define the qemu to use and the kernel arch target
$arch_qemu_exe = "qemu-system-arm";
$arch_name = "arm_versatilepb";

# describe the possible qemu combinations for the arm_versatilepb target
@arch_cpu_models = ( "arm926",
                     "arm946" );
@arch_cpu_cores  = ( "1" );
@arch_mem_fitted = ( "16M", "32M", "256M" );

# arch_generate_cmdline(cpu name, number of cpus, amount of RAM, prefix)
# Call this to craft a command line to execute the QEMU system emulator
# using the given environment settings
#  => cpu name = QEMU shorthand cpu name [0]
#     number of cpus = number of cores present in system [1]
#     amount of RAM = physical mem fitted, expressed as "xM" or "xG" [2]
#     prefix = string to prefix to filenames for output generated by QEMU [3]
#     flags = extra platform-independent switches to add to the command line [4]
#  <= returns a string to pass to system()
sub arch_generate_cmdline
{
   my $filename = @generate_pathname_prefix($_[0], $_[1], $_[2], $_[3]);
   
   return "$arch_qemu_exe -M versatilepb -cpu $_[0] -m $_[2] $_[4] -pidfile $filename.pid -serial file:$filename.log -kernel release/$arch_name/root/kernel -initrd release/$arch_name/initrd >/dev/null 2>/dev/null"
}
